plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
}

android {
    compileSdk 31

    defaultConfig {
        configurations.all {
            resolutionStrategy { force 'androidx.core:core-ktx:1.6.0' }
        }
        applicationId "com.imotorini.sbobinator9000"
        minSdk 29
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "STT_BASE_URL", "\"http://10.0.2.2:9999\"")
        }
        debug {
            minifyEnabled false
            buildConfigField("String", "STT_BASE_URL", "\"http://10.0.2.2:9999\"")
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

}

dependencies {
    implementation("com.squareup.okhttp3:okhttp:4.10.0")
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.google.android.material:material:1.4.0'  // La versione potrebbe variare
    implementation 'org.jmdns:jmdns:3.5.5'

    // Jackson to parse JSON
    implementation 'com.fasterxml.jackson.core:jackson-core:2.4.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.4.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.4.1'
    implementation 'androidx.core:core-ktx:+'
    implementation 'androidx.test.espresso:espresso-intents:3.5.1'

    // Test dependeencies
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.2.0-alpha01'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    testImplementation 'org.mockito:mockito-core:5.5.0'

    testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'
    testImplementation 'org.mockito:mockito-core:5.5.0'

}

// Checkstyle
apply plugin: 'checkstyle'

preBuild.dependsOn('checkstyle')
//build.dependsOn('checkstyle')
assemble.dependsOn('lint')
check.dependsOn('checkstyle')


apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.9"

}




task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['/R.class', '/R$*.class', '/BuildConfig.*', '/Manifest*.*',  'android//*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$projectDir/src/main/java"

    sourceDirectories.from files([mainSrc])
    classDirectories.from files([debugTree])
    executionData.from fileTree(dir: "$buildDir", includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec', "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
    ])
}
